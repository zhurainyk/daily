// import Vue form 'vue'
/**
 * 需求分析：4种情况
 * 1. 进入页面a ->查询发送请求 -> 报错 - > 产生弹窗  -> 关闭弹窗
 *
 * 2. 进入页面a ->查询发送请求 -> 报错 - > 产生弹窗  -> 未关闭弹窗 离开页面a进入页面b  隐藏并记录a页面未关闭弹窗的状态
 *
 * 3. 再次进入页面a  检查是否存在有未关闭的弹窗  如果存在未关闭的弹窗 展示弹窗内容
 *
 * 4. 手动刷新页面 重新初始化弹窗组件
 * 
 * 特殊情况 ：
 * 一个路由下面由component组件引入的时候 组件切换不会触发路由变化
 * 多个子组件组成的情况下 x ， y
 * 只能通过判断组件切换的状态来更新弹窗的状态
 *
 *
 * 具体实现思路：
 * 路由拦截守卫产生弹窗(记录弹窗id)
 * 进入路由时 判断是否已经缓存过该路由 如果缓存过 就直接读取缓存数据的状态展示弹窗 
 * 全局混入的方式
 * 
 * 
 */

class wgToast {
  // ROUTER_LIST = [];
  // TOAST_LIST = [];
  constructor() {
    this.store = {};
  }

  checkToast(data) {
    //进入页面的时候检查是否有弹窗未关闭
  }

  addToast(data) {
    //新增报错弹窗
  }

  updataToast(data) {
    //显示报错弹窗
  }

  hideToast(data) {
    //隐藏报错弹窗
  }

  removeToast(data) {
    //关闭报错弹窗
  }
}
